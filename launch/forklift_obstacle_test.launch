<!-- Used for testing motion control for the obstacle avoidance path -->
<launch>

    <!--==========================-->
    <!-- Arguments and Parameters -->
    <!--==========================-->
    <!-- Generan -->
    <arg name="debug" default="false"/>
    <arg name="port_steering" default="/dev/ttyACM0"/>
    <arg name="port_accelerator_encoder" default="/dev/ttyACM1"/>
    <arg name="clamp_scale" default="0.5"/>
    <arg name="manual_deadman" default="4"/>
    <arg name="autonomous_deadman" default="5"/>
    <arg name="timeout" default="1.0"/> <!-- seconds -->
    <!-- Joystick -->
    <arg name="joy_dev" default="/dev/input/js0"/>
    <!-- Velocity Controller -->
    <arg name="output_max" default="200"/> <!-- see accelerator arduino file -->
    <arg name="output_min" default="15"/>
    <arg name="max_angle" default="1.0472"/> <!-- 60deg -->
    <arg name="min_angle" default="-1.0472"/>
    <!-- Reset goal bool -->
    <param name="/goal_bool" value="false"/>

    <!--==================-->
    <!-- Setup Transforms -->
    <!--==================-->
    <include file="$(find setup_tf)/launch/setup_tf.launch" />
    
    <!--===============-->
    <!-- Start Sensors -->
    <!--===============-->
    <!--
    NOTE: the canbus velocity reading and IMU data should be collected
          through the Raspberry Pi by running the following commands:
          1) $ sudo slcan_add.sh (this starts the canbus reader)
          2) $ roslaunch sensors localization_velocity_imu.launch (reads imu and
               canbus data)
    --> 
    <!-- Lidars -->
    <!-- Needs to run the 'segmented' version of the lidar launch file so that
         points are published as fast as possible -->
    <include file="$(find ouster_ros)/launch/lidar0_segment.launch" />
    <node pkg="mapping" type="lidar_merge_node" name="lidar_merge_node" respawn="true">
        <param name="~num_scans" value="31"/>
        <remap from="~segmented_scan" to="/os1_node2/points"/>
    </node>
    <node pkg="ouster_ros" type="lidar_angle" name="lidar_angle" respawn = "true">
        <remap from="~input_points" to="/lidar_merge_node/single_scan"/>
        <remap from="~filtered_points" to="/back_lidar_points"/>
    </node>
    
    <!--===========================-->
    <!-- Cartographer Localization -->
    <!--===========================-->
    <node pkg="forklift_bringup" name="localization_startup" type="localization_startup.sh" output="screen"/>

    <!--=============================-->
    <!-- Mapping and Path Generation -->
    <!--=============================-->
    <node pkg="tf" type="static_transform_publisher" name="map_broadcaster"
        args="0 0 0 0 0 0 1 world map 50" />
    <include file="$(find mapping)/launch/forklift_obstacle_map_test.launch" />
    
    <node pkg="robust_navigation" type="planner_node" name="planner_node" respawn="true">
        <remap from="/path" to="/obstacle_avoidance_path"/>
        <remap from="/map" to="/obstacle_map"/>
    </node>
    
    <!-- DEBUG: Create test map -->
    <!--
    <node pkg="motion_testing" type="test_map_generator.py" name="test_map_generator">
        <remap from="/test_map_generator/map" to="/obstacle_map"/>
    </node>
    -->
    
    <!--================-->
    <!-- Start Joystick -->
    <!--================-->
    <include file="$(find motion_testing)/launch/joystick.launch">
        <arg name="manual_deadman" value="$(arg manual_deadman)"/>
        <arg name="autonomous_deadman" value="$(arg autonomous_deadman)"/>
        <arg name="timeout" value="$(arg timeout)"/>
        <arg name="joy_dev" value="$(arg joy_dev)"/>
    </include>
    
    <!--==============================================-->
    <!-- Start Motion Controllers: Steering, Velocity -->
    <!--==============================================-->
    <include file="$(find motion_testing)/launch/motion_control.launch">
        <arg name="manual_deadman" value="$(arg manual_deadman)"/>
        <arg name="autonomous_deadman" value="$(arg autonomous_deadman)"/>
        <arg name="timeout" value="$(arg timeout)"/>
        <arg name="port_steering" value="$(arg port_steering)"/>
        <arg name="port_accelerator_encoder" value="$(arg port_accelerator_encoder)"/>
        <arg name="output_max" value="$(arg output_max)"/>
        <arg name="output_min" value="$(arg output_min)"/>
        <arg name="max_angle" value="$(arg max_angle)"/>
        <arg name="min_angle" value="$(arg min_angle)"/>
    </include>
    
    <!--======================-->
    <!-- Velocity Controllers -->
    <!--======================-->
    <node pkg="robust_navigation" type="velocity_controller" name="velocity_controller" respawn="true" output="screen">
		<param name="heading_gain" value="1.0"/>
		<param name="cte_gain" value="0.1"/>
		<param name="derivative_heading_gain" value="1.0"/>
		<param name="derivative_cte_gain" value="0.1"/>
		<param name="cross_track_error_deadband" value="0.125"/>
		<param name="min_delta_time" value="0.1"/>
		<param name="num_of_segments_ahead" value="25"/>
		<param name="goal_tolerance" value="0.3"/>
		<param name="maximum_linear_velocity" value="0.25"/>
	</node>
    <!--
    <node pkg="sensors" type="velocity_conversion" name="velocity_conversion" output="screen">
        <param name="use_covariance" value="true"/>
    </node>
    -->    

    <!--==========================-->
    <!-- Maneuver Path Generation -->
    <!--==========================-->
    <!-- Required for the '/maneuver_path/optimize_maneuver' service -->
    <node pkg="grasping" type="maneuver_path.py" name="maneuver_path" output="screen">
        <remap from="/map" to="/obstacle_map"/>
        <remap from="/maneuver_path/path1" to="/maneuver_path1"/>
        <remap from="/maneuver_path/path2" to="/maneuver_path2"/>
    </node>
    <node pkg="grasping" type="approach_path" name="approach_path">
        <remap from="/approach_path/path" to="/approach_path"/>
    </node>
    
    <!--=========================-->
    <!-- Start Master Controller -->
    <!--=========================-->
    <node pkg="motion_testing" name="master_controller" type="master_controller.py" output="screen">
        <param name="~scale_grasp" value="$(arg clamp_scale)"/>
        <param name="~scale_movement" value="$(arg clamp_scale)"/>
        <param name="~debug_test" value="obstacle_avoidance"/>
    </node>

</launch>
