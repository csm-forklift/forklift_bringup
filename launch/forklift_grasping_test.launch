<!-- Runs nodes required for testing the grasping -->
<launch>

    <!--==========================-->
    <!-- Arguments and Parameters -->
    <!--==========================-->
    <!-- General -->
    <arg name="debug" default="false"/>
    <arg name="manual_deadman" default="4"/>
    <arg name="autonomous_deadman" default="5"/>
    <arg name="timeout" default="1.0"/> <!-- seconds -->
    <!-- Transforms -->
    <arg name="debug_setup_tf" default="$(arg debug)"/>
    <!-- Arduino Ports -->
    <arg name="port_steering" default="/dev/ttyACM0"/>
    <arg name="port_accelerator_encoder" default="/dev/ttyACM1"/>
    <!-- Joystick -->
    <arg name="joy_dev" default="/dev/input/js0"/>
    <!-- Grasping Control Parameters -->
    <arg name="debug_grasping" default="false"/>
    <arg name="port_clamp" default="/dev/ttyACM2"/>
    <arg name="clamp_scale" default="0.7"/>
    <arg name="target_x" default="1.0"/>
    <arg name="target_y" default="0.0"/>
    <arg name="target_frame" default="/odom"/>
    <arg name="grasp_angle" default="0.7854"/>
    <arg name="grasp_plate_offset_x" default="1.37"/>
    <arg name="grasp_plate_offset_y" default="-0.52"/>
    <arg name="angle_tolerance" default="0.01"/>
    <arg name="K_angle" default="10.0"/>
    <arg name="K_linear" default="1.0"/>
    <arg name="max_velocity" default="0.25"/>
    <arg name="approach_offset" default="3.0"/>
    <arg name="approach_tolerance" default="0.001"/>
    <arg name="backout_distance" default="1.0"/>
    <!-- Cylinder Detection Parameters -->
    <arg name="sensor_frame" default="/lidar1_link"/>
    <arg name="point_cloud_topic" default="/os1_node1/points"/>
    
    <!--==================-->
    <!-- Setup Transforms -->
    <!--==================-->
    <include file="$(find setup_tf)/launch/setup_tf.launch">
        <arg name="debug" value="$(arg debug_setup_tf)"/>
    </include>
    
    <!--===============-->
    <!-- Start Sensors -->
    <!--===============-->
    <!--
    NOTE: the canbus velocity reading and IMU data should be collected
          through the Raspberry Pi by running the following commands:
          1) $ sudo slcan_add.sh (this starts the canbus reader)
          2) $ roslaunch sensors localization_velocity_imu.launch (reads imu and
               canbus data)
    --> 
    <!-- Lidars -->
    <!-- Needs to run the 'segmented' version of the lidar launch file so that
         points are published as fast as possible -->
    <include file="$(find ouster_ros)/launch/lidar0_segment.launch"/>
    <include file="$(find ouster_ros)/launch/lidar1.launch">
        <arg name="dnsmasq" value="false"/>
    </include>
    <!-- Filters point cloud to only view rear 180 deg -->
    <node pkg="ouster_ros" type="lidar_filter_node" name ="lidar_filter_node" respawn = "true"/>
    
    <!--===========================-->
    <!-- Cartographer Localization -->
    <!--===========================-->
    <node pkg="forklift_bringup" name="localization_startup" type="localization_startup.sh" output="screen"/>
    
    <!--================-->
    <!-- Start Joystick -->
    <!--================-->
    <include file="$(find motion_testing)/launch/joystick.launch">
        <arg name="manual_deadman" value="$(arg manual_deadman)"/>
        <arg name="autonomous_deadman" value="$(arg autonomous_deadman)"/>
        <arg name="timeout" value="$(arg timeout)"/>
        <arg name="joy_dev" value="$(arg joy_dev)"/>
    </include>
    
    <!--==============================================-->
    <!-- Start Motion Controllers: Steering, Velocity -->
    <!--==============================================-->
    <include file="$(find motion_testing)/launch/motion_control.launch">
        <arg name="manual_deadman" value="$(arg manual_deadman)"/>
        <arg name="autonomous_deadman" value="$(arg autonomous_deadman)"/>
        <arg name="timeout" value="$(arg timeout)"/>
        <arg name="port_steering" value="$(arg port_steering)"/>
        <arg name="port_accelerator_encoder" value="$(arg port_accelerator_encoder)"/>
    </include>
    
    <!--============================-->
    <!-- Start Grasping Controllers -->
    <!--============================-->
    <include file="$(find grasping)/launch/grasp_control.launch">
        <arg name="debug" value="$(arg debug_grasping)"/>
        <arg name="port_clamp" value="$(arg port_clamp)"/>
        <arg name="clamp_scale" value="$(arg clamp_scale)"/>
        <arg name="target_x" value="$(arg target_x)"/>
        <arg name="target_y" value="$(arg target_y)"/>
        <arg name="target_frame" value="$(arg target_frame)"/>
        <arg name="grasp_angle" value="$(arg grasp_angle)"/>
        <arg name="angle_tolerance" value="$(arg angle_tolerance)"/>
        <arg name="K_angle" value="$(arg K_angle)"/>
        <arg name="K_linear" value="$(arg K_linear)"/>
        <arg name="max_velocity" value="$(arg max_velocity)"/>
        <arg name="grasp_plate_offset_x" value="$(arg grasp_plate_offset_x)"/>
        <arg name="grasp_plate_offset_y" value="$(arg grasp_plate_offset_y)"/>
        <arg name="approach_offset" value="$(arg approach_offset)"/>
        <arg name="approach_tolerance" value="$(arg approach_tolerance)"/>
        <arg name="backout_distance" value="$(arg backout_distance)"/>
        <arg name="manual_deadman" value="$(arg manual_deadman)"/>
        <arg name="autonomous_deadman" value="$(arg autonomous_deadman)"/>
        <arg name="timeout" value="$(arg timeout)"/>
        <arg name="sensor_frame" value="$(arg sensor_frame)"/>
        <arg name="point_cloud_topic" value="$(arg point_cloud_topic)"/>
    </include>
    
    <!--=========================-->
    <!-- Start Master Controller -->
    <!--=========================-->
    <node pkg="motion_testing" name="master_controller" type="master_controller.py" output="screen">
        <param name="~scale_grasp" value="$(arg clamp_scale)"/>
        <param name="~scale_movement" value="$(arg clamp_scale)"/>
        <param name="~debug_test" value="grasp"/>
    </node>

</launch>
